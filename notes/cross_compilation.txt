Tutorial I follow:
https://medium.com/@tahsincankose/cross-compiling-ros-project-for-arm-263642b405ac

First step is intalling a cross compiler toolchain.
When I print the architecture of my laptop I get: amd64.
When I print the architecture of the rpi I get: arm64.

And the dep pkgs the tutorial installed were:
lib32z1-dev
gcc-arm-linux-gnueabihf
g++-arm-linux-gnueabihf
And these were specific for armhf

So I did some digging and found the arm64 equivalents:
I'm going to skip the first one since I don't know that it's required.
gcc-aarch64-linux-gnu (https://packages.debian.org/stretch/gcc-aarch64-linux-gnu)

Command I was trying to get to work:
catkin_make -DCMAKE_TOOLCHAIN_FILE=$HOME/pisaBot/rpi_toolchain.cmake -DCMAKE_CROSS_COMPILE_PREFIX=$HOME/pisaBot/arm_rpi

In general I ran into too many compilation problems. I might come back to this but the following where too much:
Assuming I compile the program 1000 times working on this would only save me 13 hours which I've already spent on this. 
    (Maybe that's too conservative; maybe I'll come back to it.)
Using the catkin_make from arm_rpi has a byte code problem that I don't think I can fix:
    Traceback (most recent call last):
    File "/home/jordan/pisaBot/arm_rpi/opt/ros/noetic/bin/catkin_make", line 13, in <module>
        from catkin.builder import apply_platform_specific_defaults  # noqa: E402
    File "<frozen importlib._bootstrap>", line 991, in _find_and_load
    File "<frozen importlib._bootstrap>", line 975, in _find_and_load_unlocked
    File "<frozen importlib._bootstrap>", line 671, in _load_unlocked
    File "<frozen importlib._bootstrap_external>", line 844, in exec_module
    File "<frozen importlib._bootstrap_external>", line 976, in get_code
    File "<frozen importlib._bootstrap_external>", line 640, in _compile_bytecode
    ValueError: bad marshal data (unknown type code)
Slow compilation is sad but cross compilation seems like a bigger momentum killer for me.